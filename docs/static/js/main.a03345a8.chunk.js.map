{"version":3,"sources":["components/Banner/Banner.module.scss","components/Loading/Loading.module.scss","components/Ping/Ping.module.scss","components/FlyweightAlert/FlyweightAlert.module.scss","components/Header/Header.module.scss","redux/alertStore.ts","redux/connectionStore.ts","utils/networkMap.ts","components/Banner/index.tsx","components/Ping/index.tsx","utils/alertMap.ts","components/FlyweightAlert/index.tsx","components/Header/index.tsx","utils/ethersFactory.ts","utils/providerAdapter.ts","utils/ordersContractFactory.ts","redux/ordersStore.ts","components/NewOrderCard/index.tsx","components/Loading/index.tsx","components/OrdersCard/index.tsx","components/PlainTextLoginModal/index.tsx","components/WelcomeCard/index.tsx","App.tsx","index.tsx"],"names":["module","exports","wrapper","linkWrapper","loadingIcon","spin","anim-pulse","initialState","variant","code","msgPrimary","msgSecondary","slice","createSlice","name","reducers","alertSet","state","action","_action$payload","payload","alertClear","alertStore","configureStore","reducer","_slice$actions","actions","networkId","process","account","connected","disconnected","connectionStore","connectionStore_slice$actions","networkNames","0x1","0x5","nodeProviderPublicApiKeys","blockExplorerUrls","orderContractAddresses","confirmDepositUrls","getState","contractAddress","Banner","props","show","react_default","a","createElement","className","id","styles","Stack","direction","gap","href","concat","target","title","Ping","undefined","alertCodes","FAQ","WHAT_IS_ETH_TX","HOW_ORDERS_ADDED","CREATE_ORDER_MULTI_TX","SELF_CUSTODY","ORDER_LIVE","HOW_BLOCKCHAIN_READ","HOW_DEPOSIT_VERIFIED","alertCodeMap","_alertCodeMap","Object","defineProperty","label","FlyweightAlert","_React$Component","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","subscribeAlert","subscribe","setState","inherits","createClass","key","value","alertState","alert","Alert","onClose","dispatch","transition","Fade","dismissible","components_Ping","React","Component","Header","Navbar","bg","expand","Container","Brand","Toggle","aria-controls","Collapse","Nav","Link","isConnected","Button","type","onClick","Fragment","toggleManualLoginModal","isMetamaskProviderDetected","metamaskLogin","disabled","createNodeProvider","networkName","apiKey","ethers","providers","AlchemyProvider","createMetamaskProvider","window","Web3Provider","ethereum","ContractFactory","address","abi","provider","contractRead","Contract","signer","contractWrite","_regeneratorRuntime","Op","prototype","hasOwn","hasOwnProperty","obj","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","handleMetamaskError","console","log","metamaskErr","serializeError","msg","errorReasonOrCode","warn","mapMetamaskErrorToMessage","literals","UNKNOWN_ERR","tryMetamaskOpAsync","_ref","asyncToGenerator","_callee","func","_context","t0","_x","apply","arguments","ordersContractFactory_regeneratorRuntime","Order","tokenInDecimalAmount","tokenInSymbol","tokenOutSymbol","triggerDirection","triggerPrice","OrderResponse","orderId","anonOrderId","tokenInAmount","tokenIn","tokenOut","tokenInTriggerPrice","orderState","setAlert","confirmDeposit","confirmDepositUrl","getAddress","DEPOSIT_CONFIRM","TX_PROCESSING_2","setTimeout","axios","put","headers","X-Address","_x2","addOrder","_ref2","_callee3","order","contract","tokenInAddresses","tokenInAddress","tokenInContract","tokenInDecimals","tokenInAmountStr","_context3","createOrdersWriteContract","ordersContractAbi","functions","tryGetTokenAddress","erc20ContractAbi","decimals","Big","toString","_callee2","txNewOrder","txNewOrderReceipt","txDeposit","txDepositReceipt","_context2","CONFIRM_METAMASK_TX_STEP_1","CONFIRM_METAMASK_TX_STEP_EXPLANATION","addNewOrder","gasLimit","gasLimits","ADD_NEW_ORDER","TX_PROCESSING_1","APPROVAL_T","wait","status","CONFIRM_METAMASK_TX_STEP_2","CONFIRM_METAMASK_TX_STEP_2_EXPLANATION","transfer","DEPOSIT","FINALIZING","DEX","_x3","_x4","lastCheckedTimestamp","isOrdersLoaded","isOrderDepositPending","checked","ordersLoaded","depositPending","ordersStore","ordersStore_slice$actions","NewOrderCard_regeneratorRuntime","whitelistedCoinsSymbols","NewOrderCard","triggerDirections","triggerDirectionNames","getWhitelistedCoinSymbols","providerNetworkName","providerApiKey","ordersContractAddress","res","createOrdersReadContract","getWhitelistedSymbols","tryAddOrder","accounts","_this$state","SWAP_FROM","SWAP_TO","lt","getSigner","send","Math","floor","Date","now","0","1","2","_componentDidMount","_callee4","wc","_this2","_context4","_ordersStore$getState","watch","newAccount","_this3","Card","Body","Title","Form","Group","Text","Control","min","step","placeholder","defaultValue","onChange","e","parseFloat","required","DropdownButton","onSelect","map","symbol","Dropdown","Item","eventKey","active","parseInt","sort","b","d","Footer","Loading","arrow_clockwise","color","size","OrdersCard_regeneratorRuntime","_createForOfIteratorHelper","o","allowArrayLike","it","Array","isArray","minLen","_arrayLikeToArray","n","from","test","_unsupportedIterableToArray","F","s","_e","f","normalCompletion","didErr","_e2","arr","len","arr2","OrdersCard","orderDirectionMap","orderStatusMap","decimalsMap","providerNetworkId","setUserOrderDashboard","txResponse","ordersResponse","symbols","_iterator","_step","tokenAddresses","tokenAddress","tokenContract","tokenDecimals","orders","getOrdersByAddress","reduce","set","add","Set","_hex","ownerTail","owner","substring","tokenInAmountInt","tokenInAmountIntBig","some","handleOrderAction","actionType","cancelOrder","convertTokenAmountToBalance","_ref3","balance","balanceBig","getCachedTokenDecimals","_x5","_x6","_ref4","_x7","_x8","createAlertSetPayload","dispatchAlertSet","_ref5","_callee6","providerMetamask","tx","txReceipt","event","blockExplorerTransactionUrl","txUrl","_context6","CONFIRM_METAMASK_TX","CANCEL_CONFIRM","_callee5","_context5","CANCEL_ORDER","CANCEL_PROCESSING","CANCEL_REFUND","events","find","args","transactionHash","_x9","getBadgeBgForOrderState","_map","createOverlayTooltip","OverlayTrigger","placement","overlay","Tooltip","info_circle_fill","3","w","newTimestamp","oldTimestamp","Badge","Table","responsive","striped","bordered","hover","text","_","components_Loading","PlainTextLoginModal","networkOptions","Modal","onHide","closeButton","WelcomeCard","App_regeneratorRuntime","App","ensureMetamaskEventsBound","metamaskApi","metamaskEventsBound","on","prevState","showManualLoginModal","metamaskProvider","isRequestSuccess","request","subscribeConnected","oldAccount","subscribeDisconnected","detectEthereumProvider","isConnectedToTestnet","components_Banner","components_Header","Row","Col","FlyweightAlert_FlyweightAlert","xs","lg","OrdersCard_OrdersCard","components_WelcomeCard","NewOrderCard_NewOrderCard","PlainTextLoginModal_PlainTextLoginModal","rootEle","document","getElementById","ReactDOM","createRoot","render","StrictMode","src_App_0"],"mappings":"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","file":"static/js/main.a03345a8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Banner_wrapper__2hJeS\",\"linkWrapper\":\"Banner_linkWrapper__3ahUg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Loading_wrapper__2a5Yt\",\"loadingIcon\":\"Loading_loadingIcon___agV_\",\"spin\":\"Loading_spin__3cPqB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Ping_wrapper__3TZa5\",\"anim-pulse\":\"Ping_anim-pulse__2k17g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"FlyweightAlert_wrapper__mEkxn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Header_wrapper__1qduO\"};","import { configureStore, createSlice } from '@reduxjs/toolkit';\n\ntype AlertStoreState = {\n  variant: string | null,\n  code: number | null,\n  msgPrimary: string | null,\n  msgSecondary: string | null,\n};\n\nexport type AlertPayload = {\n  variant: string,\n  code: number,\n  msgPrimary: string,\n  msgSecondary: string | null\n};\n\nconst initialState: AlertStoreState = {\n  variant: null,\n  code: null,\n  msgPrimary: null,\n  msgSecondary: null,\n};\n\nconst slice = createSlice({\n  name: 'alertStore',\n  initialState,\n  reducers: {\n    alertSet: (state, action) => {\n      const { variant, code, msgPrimary, msgSecondary } = action.payload;\n      state.variant = variant;\n      state.code = code;\n      state.msgPrimary = msgPrimary;\n      state.msgSecondary = msgSecondary;\n    },\n    alertClear: (state) => state = initialState,\n  },\n});\n\n// Redux store for the alert banner\nconst alertStore = configureStore({\n  reducer: slice.reducer,\n});\n\nconst { alertSet, alertClear } = slice.actions;\nexport { alertStore, alertSet, alertClear };\n","import { configureStore, createSlice } from '@reduxjs/toolkit';\n\nimport { networkNames } from '../utils/networkMap';\n\ntype ConnectionStoreState = {\n  networkId: string,\n  account: string | null,\n};\n\nconst initialState: ConnectionStoreState = {\n  networkId: process.env.REACT_APP_NETWORK_ID,\n  account: null,\n};\n\nconst slice = createSlice({\n  name: 'connectionStore',\n  initialState: initialState,\n  reducers: {\n    connected: (state, action) => {\n      state.networkId = action.payload.networkId;\n      state.account = action.payload.account;\n    },\n    disconnected: (state) => state = initialState,\n  },\n});\n\n// Redux store for blockchain connection info\nconst connectionStore = configureStore({\n  reducer: slice.reducer,\n});\n\nconst { connected, disconnected } = slice.actions;\nexport { connectionStore, connected, disconnected };\n","interface NetworkMap {\n  [key: string]: string\n}\n\nexport const networkNames: NetworkMap = {\n  '0x1': 'mainnet',\n  '0x5': 'goerli',\n};\n\n/*\n * Seems to be common & well-accepted in web3 dev repos, for alchemy api keys to be public (e.g.: in client-side code).\n * Conclusion is that there is little consequence in worst case scenario (e.g.: if someone spams Alchemy & hits the rate\n * limit, a new api key can be easily \"refreshed\" or the metamask provider can be used).\n */\nexport const nodeProviderPublicApiKeys: NetworkMap = {\n  '0x1': process.env.REACT_APP_PROVIDER_ALCHEMY_PUBLIC_API_KEY_MAINNET,\n  '0x5': process.env.REACT_APP_PROVIDER_ALCHEMY_PUBLIC_API_KEY_GOERLI,\n};\n\nexport const blockExplorerUrls: NetworkMap = {\n  '0x1': process.env.REACT_APP_BLOCK_EXPLORER_TRANSACTION_URL_MAINNET,\n  '0x5': process.env.REACT_APP_BLOCK_EXPLORER_TRANSACTION_URL_GOERLI,\n};\n\nexport const orderContractAddresses: NetworkMap = {\n  '0x1': process.env.REACT_APP_ORDERS_CONTRACT_ADDRESS_MAINNET,\n  '0x5': process.env.REACT_APP_ORDERS_CONTRACT_ADDRESS_GOERLI,\n};\n\nexport const confirmDepositUrls: NetworkMap = {\n  '0x1': process.env.REACT_APP_CONFIRM_DEPOSIT_URL_MAINNET,\n  '0x5': process.env.REACT_APP_CONFIRM_DEPOSIT_URL_GOERLI,\n};\n","import React from 'react';\nimport Stack from 'react-bootstrap/Stack';\nimport { connectionStore } from '../../redux/connectionStore';\nimport { orderContractAddresses } from '../../utils/networkMap';\nimport styles from './Banner.module.scss';\n\nconst networkId = connectionStore.getState().networkId;\nconst contractAddress = orderContractAddresses[networkId];\n\ntype Props = {\n  show: boolean,\n};\n\nconst Banner = (props: Props) => {\n  if (!props.show) {\n    return null;\n  }\n\n  return (\n    <div className=\"py-1 text-center text-dark bg-warning\" id={styles.wrapper}>\n      <div>Currently connected to a testnet (network id: {networkId}).</div>\n      <div>This network only supports the UNI &amp; WETH erc-20&lsquo;s.</div>\n      <Stack direction=\"horizontal\" gap={2} className={styles.linkWrapper}>\n        <a href={`https://goerli.etherscan.io/address/${contractAddress}#code`} target=\"_blank\" title=\"Opens etherscan in a new tab\">Etherscan</a>\n        <a href=\"https://github.com/0xmn1?tab=repositories\" target=\"_blank\" title=\"Opens the github repos in a new tab\">Github</a>\n        <a href=\"https://goerlifaucet.com\" target=\"_blank\" title=\"Opens the alchemy goerli facuet in a new tab\">Goerli faucet</a>\n      </Stack>\n    </div>\n  );\n};\n\nexport default Banner;\n","import React from 'react';\nimport styles from './Ping.module.scss';\n\ntype Props = {\n  show: boolean,\n};\n\nconst Ping = (props: Props) => (\n  <div className={props.show ? styles.wrapper : undefined}></div>\n);\n\nexport default Ping;\n","interface AlertCodes {\n  [key: string]: number\n}\n\ninterface AlertCodeMap {\n  [key: string]: {\n    label: string,\n    href: string\n  }\n}\n\n// Used to reference certain alert hyperlinks in {@link alertCodeMap}\nexport const alertCodes: AlertCodes = {\n  FAQ: 1,\n  WHAT_IS_ETH_TX: 2,\n  HOW_ORDERS_ADDED: 3,\n  CREATE_ORDER_MULTI_TX: 4,\n  SELF_CUSTODY: 5,\n  ORDER_LIVE: 6,\n  HOW_BLOCKCHAIN_READ: 7,\n  HOW_DEPOSIT_VERIFIED: 8,\n};\n\n// Alert hyperlinks\nexport const alertCodeMap: AlertCodeMap = {\n  [alertCodes.FAQ]: {\n    label: 'Frequently asked questions',\n    href: '',\n  },\n  [alertCodes.WHAT_IS_ETH_TX]: {\n    label: 'What is an ethereum transaction?',\n    href: '',\n  },\n  [alertCodes.HOW_ORDERS_ADDED]: {\n    label: 'How are orders added in the smart contract?',\n    href: '',\n  },\n  [alertCodes.CREATE_ORDER_MULTI_TX]: {\n    label: 'Why does creating an order involve 2 ethereum transactions instead of 1?',\n    href: '',\n  },\n  [alertCodes.SELF_CUSTODY]: {\n    label: 'How does the smart contract implement self-custody of coins?',\n    href: '',\n  },\n  [alertCodes.ORDER_LIVE]: {\n    label: 'My order is live, what now?',\n    href: '',\n  },\n  [alertCodes.HOW_BLOCKCHAIN_READ]: {\n    label: 'How does Flyweight read the Ethereum blockchain?',\n    href: '',\n  },\n  [alertCodes.HOW_DEPOSIT_VERIFIED]: {\n    label: 'How does Flyweight verify on-chain deposits to the smart contract?',\n    href: '',\n  },\n};\n\n// Maps a metamask error code or reason, to a more user-friendly message\nexport const mapMetamaskErrorToMessage = (errorReasonOrCode: string | number) => {\n  switch (errorReasonOrCode) {\n    case 'user rejected transaction':\n    case 'ACTION_REJECTED':\n      return 'Transaction was cancelled';\n    case -32002:\n      return 'Please unlock Metamask to continue.';\n    default:\n      console.warn(`Unsuccessfully mapped metamask error to message: ${errorReasonOrCode}`);\n      return `Operation cancelled.`;\n  }\n};\n","import { alertClear, alertSet, alertStore } from '../../redux/alertStore';\n\nimport Alert from 'react-bootstrap/Alert';\nimport Fade from 'react-bootstrap/Fade';\nimport Ping from '../Ping';\nimport React from 'react';\nimport { alertCodeMap } from '../../utils/alertMap';\nimport styles from './FlyweightAlert.module.scss';\n\ntype Props = {};\ntype State = {\n  show: boolean,\n};\n\nexport default class FlyweightAlert extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      show: false\n    };\n  }\n\n  componentDidMount() {\n    this.subscribeAlert();\n  }\n\n  subscribeAlert = () => {\n    alertStore.subscribe(() => {\n      const show = !!alertStore.getState().code;\n      this.setState({ show });\n    });\n  };\n\n  render() {\n    if (!this.state.show) {\n      return null;\n    }\n\n    const alertState = alertStore.getState();\n    if (!alertState || !alertState.code) {\n      return null;\n    }\n\n    const alert = alertCodeMap[alertState.code];\n    return this.state.show && (\n      <Alert variant={alertState.variant || undefined} show={!!alertState.msgPrimary} onClose={() => alertStore.dispatch(alertClear())} transition={Fade} className='wrapper-alert' id={styles.wrapper} dismissible>\n        <h5 className=\"d-flex align-items-center mb-0\">\n          <Ping show={alertState.variant === 'info'} />\n          <div>{alertState.msgPrimary}</div>\n        </h5>\n        <div>\n          <small>{alertState.msgSecondary}</small>\n        </div>\n        <a href={alert.href} target=\"_blank\">\n          <small className=\"text-muted\">\n            {alert.label}\n          </small>\n        </a>\n      </Alert>\n    );\n  }\n}\n","import { connectionStore, disconnected } from '../../redux/connectionStore';\n\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport React from 'react';\nimport Stack from 'react-bootstrap/Stack';\nimport styles from './Header.module.scss';\n\ntype Props = {\n  isConnected: boolean,\n  toggleManualLoginModal: () => void,\n  isMetamaskProviderDetected: boolean,\n  metamaskLogin: () => void,\n};\n\nconst Header = (props: Props) => (\n  <Navbar bg=\"light\" expand=\"lg\" className=\"mb-3\" id={styles.wrapper}>\n    <Container>\n      <Navbar.Brand>\n        <Stack direction=\"vertical\" gap={0}>\n          <div><b>Fly</b>weight</div>\n        </Stack>\n      </Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse>\n        <Nav className=\"me-auto\">\n          <Nav.Link>Home</Nav.Link>\n          <Nav.Link>Dashboard</Nav.Link>\n          <Nav.Link>FAQ</Nav.Link>\n          <Nav.Link href=\"https://github.com/0xmn1?tab=repositories\" target=\"_blank\">Github</Nav.Link>\n        </Nav>\n      </Navbar.Collapse>\n\n      {props.isConnected ? (\n        <Button variant=\"primary\" type=\"button\" onClick={() => connectionStore.dispatch(disconnected())}>\n          Disconnect\n        </Button>\n      ) : (\n        <>\n          <Stack direction=\"horizontal\" gap={2}>\n            <Button variant=\"primary\" type=\"button\" onClick={props.toggleManualLoginModal}>\n              Connect using plain-text\n            </Button>\n            <Button variant={props.isMetamaskProviderDetected === false ? 'secondary' : 'primary'} type=\"button\" onClick={props.metamaskLogin} disabled={props.isMetamaskProviderDetected === false}>\n              Connect using Metamask\n            </Button>\n          </Stack>\n        </>\n      )}\n    </Container>\n  </Navbar>\n);\n\nexport default Header;\n","import { Contract, ContractInterface, Signer, ethers, providers } from 'ethers';\n\n// Provides a blockchain read-only connection without requiring metamask\nexport const createNodeProvider = (networkName: string, apiKey: string): providers.AlchemyProvider =>\n  new ethers.providers.AlchemyProvider(networkName, apiKey);\n\n// Provides a blockchain connection through metamask's injected provider\nexport const createMetamaskProvider = (window: any): providers.Web3Provider =>\n  new ethers.providers.Web3Provider(window.ethereum);\n\n// Creates proxies representing the flyweight smart contract\nexport abstract class ContractFactory {\n  private static contractRead: Contract | null = null;\n  private static contractWrite: Contract | null = null;\n\n  static createOrdersReadContract(address: string, abi: ContractInterface, provider: providers.Provider): Contract {\n    this.contractRead = this.contractRead || new ethers.Contract(address, abi, provider);\n    return this.contractRead;\n  }\n\n  static createOrdersWriteContract(address: string, abi: ContractInterface, signer: Signer): Contract {\n    this.contractWrite = this.contractWrite || new ethers.Contract(address, abi, signer);\n    return this.contractWrite;\n  }\n}\n","import { alertCodes, mapMetamaskErrorToMessage } from './alertMap';\nimport { alertSet, alertStore } from '../redux/alertStore';\n\nimport literals from './resources/literals/english.json';\nimport { serializeError } from 'eth-rpc-errors';\n\nconst handleMetamaskError = (err: unknown): void => {\n  console.log(err);\n  const metamaskErr = serializeError(err);\n  const msg = metamaskErr.code\n    ? mapMetamaskErrorToMessage(metamaskErr.code)\n    : literals.UNKNOWN_ERR;\n\n  const alert = {\n    variant: 'secondary',\n    code: alertCodes.FAQ,\n    msgPrimary: msg,\n    msgSecondary: null\n  };\n  alertStore.dispatch(alertSet(alert));\n};\n\n/*\n * Light wrapper for metamask operations.\n * @param func - lambda containing the metamask operations\n * @returns true if lambda succeeded without error, otherwise false\n * @remarks\n * Metamask errors are caught & passed onto {@link handleMetamaskError} to enhance UX\n */\nexport const tryMetamaskOpAsync = async (func: () => Promise<void>): Promise<boolean> => {\n  try {\n    await func();\n    return true;\n  } catch (err) {\n    handleMetamaskError(err);\n    return false;\n  }\n};\n","import { Signer, ethers } from 'ethers';\nimport { alertSet, alertStore } from '../redux/alertStore';\nimport { confirmDepositUrls, orderContractAddresses } from './networkMap';\n\nimport Big from 'big.js';\nimport { ContractFactory } from './ethersFactory';\nimport { alertCodes } from './alertMap';\nimport axios from 'axios';\nimport { connectionStore } from '../redux/connectionStore';\nimport erc20ContractAbi from './resources/abi-erc20-contract.json';\nimport gasLimits from './resources/gas-limits.json';\nimport literals from './resources/literals/english.json';\nimport ordersContractAbi from './resources/abi-orders-smart-contract.json';\nimport { tryMetamaskOpAsync } from './providerAdapter';\n\n// Represents a new order that a user is creating\nexport class Order {\n  constructor(\n    public tokenInDecimalAmount: number,\n    public tokenInSymbol: string,\n    public tokenOutSymbol: string,\n    public triggerDirection: number,\n    public triggerPrice: string,\n  ) {\n  }\n}\n\n// Represents an order stored in the Flyweight smart contract \nexport type OrderResponseDto = {\n  id: { _hex: string },\n  owner: string,\n  tokenInAmount: { _hex: string },\n  tokenIn: string,\n  tokenInTriggerPrice: string,\n  tokenOut: string,\n  direction: number,\n  orderState: number,\n};\n\n/*\n * Represents a pre-existing user order.\n * @remarks\n * Hexes are converted to decimals.\n */\nexport class OrderResponse {\n  constructor(\n    public orderId: number,\n    public anonOrderId: string,\n    public tokenInAmount: string,\n    public tokenIn: string,\n    public tokenOut: string,\n    public direction: string,\n    public tokenInTriggerPrice: string,\n    public orderState: string,\n  ) {\n  }\n}\n\nconst setAlert = (variant: string, code: number, msgPrimary: string, msgSecondary: string | null) => {\n  const alert = { variant, code, msgPrimary, msgSecondary };\n  alertStore.dispatch(alertSet(alert));\n};\n\n/*\n * Used to trigger confirmation of an on-chain deposit for a new order.\n * Sends out a http request to an oracle which contains the verification logic.\n */\nconst confirmDeposit = async (networkId: string, signer: Signer) => {\n  const confirmDepositUrl = confirmDepositUrls[networkId];\n  const address = await signer.getAddress();\n  console.log('Triggering deposit confirmation...');\n  setAlert('info', alertCodes.HOW_DEPOSIT_VERIFIED, literals.DEPOSIT_CONFIRM, literals.TX_PROCESSING_2);\n\n  /*\n   * Wait before triggerring on-chain transaction verification.\n   * @remarks\n   * Etherscan API has a time lag when returning recently confirmed transactions.\n   * E.g.: there is usually a 5-20 second delay, between a block getting first confirmation, & the blocks' transactions being returned by the Etherscan API.\n   * 0xmn1 has confirmed this undocumented quirky behaviour with the Etherscan support team.\n   * Due to this undocumented new discovery, recommended to switch to a \"real-time\" provider.\n   * Further commentary in the oracle node module that calls the Etherscan API.\n   */\n  const maxEthBlockTime = 20000;\n\n  await new Promise(resolve => setTimeout(resolve, maxEthBlockTime));  // After tx is included in a block, we should wait for the user on-chain deposit to be approved by nodes\n  try {\n    await axios.put(confirmDepositUrl, {}, {\n      headers: {\n        'X-Address': address\n      }\n    });\n\n    console.log('triggered successfully.');\n    return true;\n  } catch (err) {\n    console.error(err);\n    return false;\n  }\n};\n\n// Adds a new order to the Flyweight smart contract\nexport const addOrder = async (signer: Signer, order: Order) => {\n  const networkId = connectionStore.getState().networkId;\n  const contractAddress = orderContractAddresses[networkId];\n  const contract = ContractFactory.createOrdersWriteContract(contractAddress, ordersContractAbi, signer);\n  const tokenInAddresses = await contract.functions.tryGetTokenAddress(order.tokenInSymbol);\n  const tokenInAddress = tokenInAddresses[0];\n  const tokenInContract = new ethers.Contract(tokenInAddress, erc20ContractAbi, signer);\n\n  const tokenInDecimals = await tokenInContract.functions.decimals();\n  const tokenInAmount = new Big(`${order.tokenInDecimalAmount}e${tokenInDecimals}`);\n  const tokenInAmountStr = tokenInAmount.toString();\n\n  await tryMetamaskOpAsync(async () => {\n    setAlert('primary', alertCodes.WHAT_IS_ETH_TX, literals.CONFIRM_METAMASK_TX_STEP_1, literals.CONFIRM_METAMASK_TX_STEP_EXPLANATION);\n    const txNewOrder = await contract.functions.addNewOrder(\n      order.tokenInSymbol,\n      order.tokenOutSymbol,\n      order.triggerPrice,\n      order.triggerDirection,\n      tokenInAmountStr,\n      { gasLimit: gasLimits.ADD_NEW_ORDER },\n    );\n\n    setAlert('info', alertCodes.HOW_ORDERS_ADDED, literals.TX_PROCESSING_1, literals.APPROVAL_T);\n    const txNewOrderReceipt = await txNewOrder.wait();\n    if (txNewOrderReceipt.status === 0) {\n      throw txNewOrderReceipt;\n    }\n\n    setAlert('primary', alertCodes.CREATE_ORDER_MULTI_TX, literals.CONFIRM_METAMASK_TX_STEP_2, literals.CONFIRM_METAMASK_TX_STEP_2_EXPLANATION);\n    const txDeposit = await tokenInContract.transfer(contract.address, tokenInAmountStr, { gasLimit: gasLimits.DEPOSIT });\n    setAlert('info', alertCodes.SELF_CUSTODY, literals.FINALIZING, literals.TX_PROCESSING_2);\n    const txDepositReceipt = await txDeposit.wait();\n    if (txDepositReceipt.status === 0) {\n      throw txDepositReceipt;\n    }\n\n    if (await confirmDeposit(networkId, signer)) {\n      setAlert('success', alertCodes.ORDER_LIVE, literals.ORDER_LIVE, literals.DEX);\n    } else {\n      setAlert('warning', alertCodes.FAQ, literals.UNKNOWN_ERR, null);\n    }\n  });\n};\n","import { configureStore, createSlice } from '@reduxjs/toolkit';\n\ntype OrdersStoreState = {\n  lastCheckedTimestamp: number | null,\n  isOrdersLoaded: boolean,\n  isOrderDepositPending: boolean,\n};\n\nconst initialState: OrdersStoreState = {\n  lastCheckedTimestamp: null,\n  isOrdersLoaded: false,\n  isOrderDepositPending: false,\n};\n\nconst slice = createSlice({\n  name: 'ordersStore',\n  initialState,\n  reducers: {\n    checked: (state, action) => {\n      state.lastCheckedTimestamp = action.payload.lastCheckedTimestamp;\n    },\n    ordersLoaded: (state, action) => {\n      state.isOrdersLoaded = action.payload.isOrdersLoaded;\n    },\n    depositPending: (state, action) => {\n      state.isOrderDepositPending = action.payload.isOrderDepositPending;\n    },\n  },\n});\n\n// Redux store for user orders\nconst ordersStore = configureStore({\n  reducer: slice.reducer,\n});\n\nconst { checked, depositPending, ordersLoaded } = slice.actions;\nexport { ordersStore, checked, depositPending, ordersLoaded };\n","import { ContractFactory, createMetamaskProvider, createNodeProvider } from '../../utils/ethersFactory';\nimport { Order, addOrder } from '../../utils/ordersContractFactory';\nimport { alertClear, alertSet, alertStore } from '../../redux/alertStore';\nimport { alertCodes, mapMetamaskErrorToMessage } from '../../utils/alertMap';\nimport { checked, ordersStore } from '../../redux/ordersStore';\nimport { networkNames, nodeProviderPublicApiKeys } from '../../utils/networkMap';\n\nimport Big from 'big.js';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Form from 'react-bootstrap/Form';\nimport React from 'react';\nimport Stack from 'react-bootstrap/Stack';\nimport { connectionStore } from '../../redux/connectionStore';\nimport literals from '../../utils/resources/literals/english.json';\nimport { orderContractAddresses } from '../../utils/networkMap';\nimport ordersContractAbi from '../../utils/resources/abi-orders-smart-contract.json';\nimport { tryMetamaskOpAsync } from '../../utils/providerAdapter';\nimport watch from 'redux-watch';\n\ntype Props = {\n  isMetamaskProviderDetected: boolean,\n};\n\ntype State = {\n  tokenInDecimalAmount: number,\n  tokenInSymbol: string | null,\n  tokenOutSymbol: string | null,\n  triggerDirection: number,\n  triggerPrice: string,\n  isOrdersLoaded: boolean,\n  isOrderDepositPending: boolean,\n  whitelistedCoinsSymbols: string[]\n};\n\nconst initialState: State = {\n  tokenInDecimalAmount: 0.001,\n  tokenInSymbol: 'UNI',\n  tokenOutSymbol: 'WETH',\n  triggerDirection: 2,\n  triggerPrice: '0.02',\n  isOrdersLoaded: false,\n  isOrderDepositPending: false,\n  whitelistedCoinsSymbols: []\n};\n\nexport default class NewOrderCard extends React.Component<Props, State> {\n  private triggerDirections: Array<number>;\n  private triggerDirectionNames: { [key: number]: string };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = initialState;\n    this.triggerDirections = [0, 1, 2];\n    this.triggerDirectionNames = {\n      0: 'below',\n      1: 'equal to',\n      2: 'above'\n    };\n  }\n\n  async componentDidMount() {\n    ordersStore.subscribe(() => {\n      const { isOrdersLoaded, isOrderDepositPending } = ordersStore.getState();\n      this.setState({ isOrdersLoaded, isOrderDepositPending });\n    });\n\n    const wc = watch(connectionStore.getState, 'account');\n    connectionStore.subscribe(wc(newAccount => {\n      if (!newAccount) {\n        this.setState(initialState);\n      }\n    }));\n\n    const whitelistedCoinsSymbols = await this.getWhitelistedCoinSymbols();\n    this.setState({ whitelistedCoinsSymbols });\n  }\n\n  getWhitelistedCoinSymbols = async () => {\n    const networkId = connectionStore.getState().networkId;\n    const providerNetworkName = networkNames[networkId];\n    const providerApiKey = nodeProviderPublicApiKeys[networkId];\n    const provider = createNodeProvider(providerNetworkName, providerApiKey);\n    const ordersContractAddress = orderContractAddresses[networkId];\n    const contract = ContractFactory.createOrdersReadContract(ordersContractAddress, ordersContractAbi, provider);\n    const res = await contract.functions.getWhitelistedSymbols();\n    return res[0];\n  };\n\n  setAlert = (variant: string, code: number, msgPrimary: string, msgSecondary: string | null) => {\n    const alert = { variant, code, msgPrimary, msgSecondary };\n    alertStore.dispatch(alertSet(alert));\n  };\n\n  tryAddOrder = async () => {\n    if (!this.state.tokenInSymbol) {\n      this.setAlert('warning', alertCodes.FAQ, literals.SWAP_FROM, null);\n    } else if (!this.state.tokenOutSymbol) {\n      this.setAlert('warning', alertCodes.FAQ, literals.SWAP_TO, null);\n    } else if (!this.state.tokenInDecimalAmount || this.state.tokenInDecimalAmount <= 0) {\n      this.setAlert('warning', alertCodes.FAQ, 'Please select a valid number of tokens to swap.', `Your order is currently configured to swap \"${this.state.tokenInDecimalAmount}\" tokens`);\n    } else if (this.state.tokenInSymbol === this.state.tokenOutSymbol) {\n      this.setAlert('warning', alertCodes.FAQ, 'Please select 2 different pairs of tokens to swap.', `Your order is currently configured to swap \"${this.state.tokenInSymbol}\" to \"${this.state.tokenOutSymbol}\"`);\n    } else if (!this.state.triggerPrice || new Big(this.state.triggerPrice).lt(0)) {\n      this.setAlert('warning', alertCodes.FAQ, 'Please select a valid trigger price.', `Your order is currently configured to trigger at \"${this.state.triggerPrice} $USD\"`);\n    } else {\n      alertStore.dispatch(alertClear());\n      const provider = createMetamaskProvider(window);\n      const signer = provider.getSigner();\n      let accounts = await provider.send('eth_accounts', []);\n      const isMetamaskConnected = accounts.length;\n      if (!isMetamaskConnected) {\n        this.setAlert('primary', alertCodes.FAQ, 'Please connect to Metamask to add new orders on Ethereum.', null);\n\n        await tryMetamaskOpAsync(async () => {\n          accounts = await provider.send('eth_requestAccounts', []);\n        });\n      }\n\n      const {\n        tokenInDecimalAmount,\n        tokenInSymbol,\n        tokenOutSymbol,\n        triggerDirection,\n        triggerPrice\n      } = this.state;\n\n      const order = new Order(\n        tokenInDecimalAmount,\n        tokenInSymbol,\n        tokenOutSymbol,\n        triggerDirection,\n        triggerPrice\n      );\n\n      await addOrder(signer, order);\n      const lastCheckedTimestamp = Math.floor(Date.now() / 1000);\n      ordersStore.dispatch(checked({ lastCheckedTimestamp }));\n    }\n  };\n\n  render() {\n    if (!this.state.isOrdersLoaded) {\n      return null;\n    }\n\n    return (\n      <Card>\n        <Card.Body>\n          <Card.Title>New order</Card.Title>\n          <Form>\n            <Form.Group className=\"mb-3\">\n              <Form.Text>I want to swap...</Form.Text>\n              <Stack direction=\"horizontal\" gap={1} className=\"mb-2\">\n                <Form.Control type=\"number\" min=\"0\" step=\"0.001\" placeholder=\"example: 10.0001\" defaultValue={this.state.tokenInDecimalAmount} onChange={e => this.setState({ tokenInDecimalAmount: parseFloat(e.target.value) })} required />\n                <DropdownButton title={this.state.tokenInSymbol} onSelect={tokenInSymbol => this.setState({ tokenInSymbol })} variant=\"dark\">\n                  {this.state.whitelistedCoinsSymbols.map((symbol: string) => (\n                    <Dropdown.Item key={symbol} eventKey={symbol} active={this.state.tokenInSymbol === symbol}>{symbol}</Dropdown.Item>\n                  ))}\n                </DropdownButton>\n                <Form.Text>to</Form.Text>\n                <DropdownButton title={this.state.tokenOutSymbol} onSelect={tokenOutSymbol => this.setState({ tokenOutSymbol })} variant=\"dark\">\n                  {this.state.whitelistedCoinsSymbols.map((symbol: string) => (\n                    <Dropdown.Item key={symbol} eventKey={symbol} active={this.state.tokenOutSymbol === symbol}>{symbol}</Dropdown.Item>\n                  ))}\n                </DropdownButton>\n              </Stack>\n              <Form.Text>when the price of <span className=\"fw-bold\">{this.state.tokenInSymbol}</span> becomes</Form.Text>\n              <Stack direction=\"horizontal\" gap={1}>\n                <DropdownButton title={this.triggerDirectionNames[this.state.triggerDirection]} onSelect={triggerDirection => triggerDirection !== undefined && triggerDirection !== null && this.setState({ triggerDirection: parseInt(triggerDirection) })} variant=\"dark\">\n                  {this.triggerDirections.sort((a, b) => b - a).map(d => (\n                    <Dropdown.Item key={d} eventKey={d} active={this.state.triggerDirection === d}>{this.triggerDirectionNames[d]}</Dropdown.Item>\n                  ))}\n                </DropdownButton>\n                <Form.Control type=\"number\" min=\"0\" step=\"0.01\" placeholder=\"example: 250.90\" defaultValue={this.state.triggerPrice} onChange={e => this.setState({ triggerPrice: e.target.value })} required />\n                <Form.Text>USD$</Form.Text>\n              </Stack>\n            </Form.Group>\n          </Form>\n        </Card.Body>\n        <Card.Footer>\n          <div className=\"d-flex align-items-center justify-content-between\">\n            <Button variant={this.props.isMetamaskProviderDetected === false ? 'secondary' : 'primary'} type=\"button\" onClick={this.tryAddOrder} disabled={this.props.isMetamaskProviderDetected === false || this.state.isOrderDepositPending}>\n              Create order\n            </Button>\n            <Card.Text>\n              <small className=\"text-muted text-right\">\n                (opens <a href=\"https://metamask.io/\" target=\"_blank\" title=\"Opens metamask home page in a new browser tab\">Metamask</a>)\n              </small>\n            </Card.Text>\n          </div>\n          {this.state.isOrderDepositPending ? (\n            <Card.Text>\n              <small className=\"text-muted text-right\">\n                You already have an order pending deposit. To create a new order, please cancel your order that is pending a deposit.\n              </small>\n            </Card.Text>\n          ) : null}\n        </Card.Footer>\n      </Card>\n    );\n  }\n}\n","import { ArrowClockwise } from 'react-bootstrap-icons';\nimport React from 'react';\nimport styles from './Loading.module.scss';\n\nconst Loading = () => (\n  <div className=\"d-flex align-items-center justify-content-center\" id={styles.wrapper}>\n    <ArrowClockwise color=\"lightgray\" size={64} className={styles.loadingIcon} />\n    <div>reading ethereum contract..</div>\n  </div>\n);\n\nexport default Loading;\n","import { AlertPayload, alertSet, alertStore } from '../../redux/alertStore';\nimport { Contract, ContractReceipt, ContractTransaction, Event, Signer, ethers, providers } from 'ethers';\nimport { Order, OrderResponse, OrderResponseDto } from '../../utils/ordersContractFactory';\nimport { alertCodes, mapMetamaskErrorToMessage } from '../../utils/alertMap';\nimport { blockExplorerUrls, networkNames, nodeProviderPublicApiKeys, orderContractAddresses } from '../../utils/networkMap';\nimport { checked, depositPending, ordersLoaded, ordersStore } from '../../redux/ordersStore';\n\nimport Badge from 'react-bootstrap/Badge';\nimport Big from 'big.js';\nimport Card from 'react-bootstrap/Card';\nimport { ContractFactory } from '../../utils/ethersFactory';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport { InfoCircleFill } from 'react-bootstrap-icons';\nimport Loading from '../Loading';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport React from 'react';\nimport Table from 'react-bootstrap/Table';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport { connectionStore } from '../../redux/connectionStore';\nimport { createNodeProvider } from '../../utils/ethersFactory';\nimport erc20ContractAbi from '../../utils/resources/abi-erc20-contract.json';\nimport gasLimits from '../../utils/resources/gas-limits.json';\nimport literals from '../../utils/resources/literals/english.json';\nimport ordersContractAbi from '../../utils/resources/abi-orders-smart-contract.json';\nimport { tryMetamaskOpAsync } from '../../utils/providerAdapter';\nimport watch from 'redux-watch';\n\ntype Props = {\n  className: string,\n};\n\ntype State = {\n  orders: Array<OrderResponse> | null,\n};\n\nconst ordersContractAddress = orderContractAddresses[connectionStore.getState().networkId];\n\nexport default class OrdersCard extends React.Component<Props, State> {\n  private orderDirectionMap: { [key: number]: string };\n  private orderStatusMap: { [key: number]: string };\n  private decimalsMap: { [key: string]: number };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      orders: null\n    };\n\n    this.orderDirectionMap = {\n      0: '<',\n      1: '=',\n      2: '>'\n    };\n\n    this.orderStatusMap = {\n      0: 'Untriggered',\n      1: 'Pending deposit',\n      2: 'Executed',\n      3: 'Cancelled'\n    };\n\n    this.decimalsMap = {};\n  }\n\n  componentDidMount() {\n    connectionStore.subscribe(() => {\n      const account = connectionStore.getState().account;\n      if (account) {\n        this.setUserOrderDashboard(account);\n      }\n    });\n\n    const w = watch(ordersStore.getState, 'lastCheckedTimestamp');\n    ordersStore.subscribe(w((newTimestamp, oldTimestamp) => {\n      if (newTimestamp > oldTimestamp) {\n        const account = connectionStore.getState().account;\n        this.setUserOrderDashboard(account);\n      }\n    }));\n\n    this.setUserOrderDashboard(connectionStore.getState().account);\n  }\n\n  createNodeProvider = () => {\n    const providerNetworkId = connectionStore.getState().networkId;\n    const providerNetworkName = networkNames[providerNetworkId];\n    const providerApiKey = nodeProviderPublicApiKeys[providerNetworkId];\n    return createNodeProvider(providerNetworkName, providerApiKey);\n  };\n\n  setUserOrderDashboard = async (account: string | null) => {\n    this.setState({ orders: null });\n\n    if (!account) {\n      console.warn('Tried to set user order before setting account address');\n      return;\n    }\n\n    const provider = this.createNodeProvider();\n    const contract = ContractFactory.createOrdersReadContract(ordersContractAddress, ordersContractAbi, provider);\n    const txResponse = await contract.functions.getOrdersByAddress(account);\n    const ordersResponse = txResponse[0];\n    const decimalsMap: { [key: string]: number } = {};\n    const symbols = ordersResponse.reduce((set: Set<string>, order: OrderResponseDto) => set.add(order.tokenIn), new Set());\n    for (let symbol of symbols) {\n      const isCached = decimalsMap.hasOwnProperty(symbol);\n      if (!isCached) {\n        const tokenAddresses = await contract.functions.tryGetTokenAddress(symbol);\n        const tokenAddress = tokenAddresses[0];\n        const tokenContract = new ethers.Contract(tokenAddress, erc20ContractAbi, provider);\n        const tokenDecimals = await tokenContract.functions.decimals();\n        decimalsMap[symbol] = tokenDecimals;\n      }\n    }\n\n    const orders: OrderResponse[] = ordersResponse.map((o: OrderResponseDto) => {\n      const orderId = parseInt(o.id._hex, 16);\n      const ownerTail = o.owner.substring(o.owner.length - 4, o.owner.length);\n      const tokenInAmountInt = parseInt(o.tokenInAmount._hex, 16);\n      const tokenInDecimals = decimalsMap[o.tokenIn];\n      const tokenInAmountIntBig = new Big(`${tokenInAmountInt}e-${tokenInDecimals}`);\n      const anonOrderId = `${ownerTail}${orderId}`;\n\n      return new OrderResponse(\n        orderId,\n        anonOrderId,\n        tokenInAmountIntBig.toString(),\n        o.tokenIn,\n        o.tokenOut,\n        this.orderDirectionMap[o.direction],\n        o.tokenInTriggerPrice,\n        this.orderStatusMap[o.orderState],\n      );\n    });\n\n    const isOrderDepositPending = orders.some(o => o.orderState === this.orderStatusMap[1]);\n    ordersStore.dispatch(depositPending({ isOrderDepositPending }));\n    ordersStore.dispatch(ordersLoaded({ isOrdersLoaded: true }))\n    this.setState({ orders });\n  };\n\n  handleOrderAction = async (orderId: number, actionType: string | null) => {\n    switch (actionType) {\n      case 'cancel':\n        await this.cancelOrder(orderId);\n        break;\n      default:\n        console.warn(`Unhandled action type: ${actionType}`);\n        break;\n    }\n\n    const lastCheckedTimestamp = Math.floor(Date.now() / 1000);\n    ordersStore.dispatch(checked({ lastCheckedTimestamp }));\n  };\n\n  convertTokenAmountToBalance = async (contract: Contract, symbol: string, balance: string) => {\n    const decimals = await this.getCachedTokenDecimals(contract, symbol);\n    const balanceBig = new Big(`${balance}e-${decimals}`);\n    return balanceBig.toString();\n  };\n\n  getCachedTokenDecimals = async (contract: Contract, symbol: string) => {\n    if (this.decimalsMap[symbol]) {\n      return this.decimalsMap[symbol];\n    }\n\n    const tokenAddresses = await contract.functions.tryGetTokenAddress(symbol);\n    const tokenAddress = tokenAddresses[0];\n    const tokenContract = new ethers.Contract(tokenAddress, erc20ContractAbi, this.createNodeProvider());\n    const decimals = await tokenContract.functions.decimals();\n    this.decimalsMap[symbol] = decimals;\n    return decimals;\n  };\n\n  createAlertSetPayload = (variant: string, code: number, msgPrimary: string, msgSecondary: string | null) => ({\n    variant,\n    code,\n    msgPrimary,\n    msgSecondary\n  });\n\n  dispatchAlertSet = (payload: AlertPayload) => alertStore.dispatch(alertSet(payload));\n\n  cancelOrder = async (orderId: number) => {\n    const providerMetamask = new ethers.providers.Web3Provider((window as any).ethereum);\n    const signer = providerMetamask.getSigner();\n    const contract = ContractFactory.createOrdersWriteContract(ordersContractAddress, ordersContractAbi, signer);\n    this.dispatchAlertSet(this.createAlertSetPayload('primary', alertCodes.FAQ, literals.CONFIRM_METAMASK_TX, literals.CANCEL_CONFIRM));\n\n    let tx: ContractTransaction | null;\n    const cancelResult = await tryMetamaskOpAsync(async () => {\n      tx = await contract.functions.cancelOrder(orderId, { gasLimit: gasLimits.CANCEL_ORDER });\n    });\n\n    if (!cancelResult) {\n      return;\n    }\n\n    this.dispatchAlertSet(this.createAlertSetPayload('info', alertCodes.FAQ, literals.CANCEL_PROCESSING, literals.CANCEL_REFUND));\n\n    const txReceipt: ContractReceipt = await tx!.wait();\n    if (txReceipt.status === 0) {\n      throw txReceipt;\n    }\n    if (!txReceipt.events) {\n      throw 'Transaction events not found';\n    }\n\n    const event: Event | undefined = txReceipt.events.find((e: Event) => e.event === 'OrderCancelled');\n    if (!event || !event.args) {\n      throw 'OrderCancelled event not found';\n    }\n\n    const tokenInAmount = parseInt(event.args.tokenInAmount._hex, 16).toString();\n    const refundBalance = await this.convertTokenAmountToBalance(contract, event.args.tokenIn, tokenInAmount);\n    const refundDetails = 'Order cancelled successfully.';\n    const blockExplorerTransactionUrl = blockExplorerUrls[connectionStore.getState().networkId];\n    const txUrl = `${blockExplorerTransactionUrl}/${txReceipt.transactionHash}`;\n\n    this.dispatchAlertSet(this.createAlertSetPayload('success', alertCodes.FAQ, refundDetails, txUrl));\n  };\n\n  getBadgeBgForOrderState = (orderState: string): string => {\n    const map = {\n      [this.orderStatusMap[0]]: 'warning',\n      [this.orderStatusMap[1]]: 'info',\n      [this.orderStatusMap[2]]: 'success',\n      [this.orderStatusMap[3]]: 'secondary'\n    };\n\n    return map[orderState];\n  };\n\n  createOverlayTooltip = (msg: string) => (\n    <OverlayTrigger placement=\"bottom\" overlay={(<Tooltip>{msg}</Tooltip>)}>\n      <InfoCircleFill color=\"gray\" size={16} className=\"ms-1\" />\n    </OverlayTrigger>\n  );\n\n  render() {\n    const account = connectionStore.getState().account;\n    return (\n      <Card className={this.props.className}>\n        <Card.Body>\n          <Card.Title>\n            Orders\n          </Card.Title>\n\n          {!this.state.orders ? (\n            <Loading />\n          ) : this.state.orders.length ? (\n            <>\n              <Card.Text className=\"text-muted\">\n                Your orders for <Badge bg=\"secondary\">{account}</Badge> are listed here. You can cancel orders using the \"Action\" button on the right, & change wallet addresses by selecting a different address in Metamask.\n              </Card.Text>\n              <Table responsive striped bordered hover>\n                <thead>\n                  <tr>\n                    <th>\n                      Anonymous order ID\n                      {this.createOverlayTooltip('This ID is just used as a reference to keep track of orders')}\n                    </th>\n                    <th>\n                      Swap amount\n                      {this.createOverlayTooltip('The amount of tokens that will be swapped if/when an order is triggered')}\n                    </th>\n                    <th>\n                      Swap from\n                      {this.createOverlayTooltip('This is the token deposited and will be used to swap to something else')}\n                    </th>\n                    <th>\n                      Swap to\n                      {this.createOverlayTooltip('The token that will be automatically sent to the order owner upon trigger')}\n                    </th>\n                    <th>\n                      Trigger (USD)\n                      {this.createOverlayTooltip('Quotes are in USD. Prices are fetched using an oracle that leverages the official CoinMarketCap API')}\n                    </th>\n                    <th>\n                      Status\n                      {this.createOverlayTooltip('Tokens are immediately sent upon swap execution')}\n                    </th>\n                    <th>\n                      Action\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {this.state.orders.map(o => (\n                    <tr key={o.orderId}>\n                      <td>{o.anonOrderId}</td>\n                      <td>{o.tokenInAmount}</td>\n                      <td>{o.tokenIn}</td>\n                      <td>{o.tokenOut}</td>\n                      <td>\n                        {o.direction}&nbsp;${o.tokenInTriggerPrice}\n                      </td>\n                      <td>\n\n                        <Badge bg={this.getBadgeBgForOrderState(o.orderState)} text=\"dark\">{o.orderState}</Badge>\n                      </td>\n                      <td>\n                        <DropdownButton title=\"\" onSelect={(actionType, _) => this.handleOrderAction(o.orderId, actionType)} variant=\"dark\">\n                          <Dropdown.Item eventKey=\"cancel\" disabled={o.orderState !== this.orderStatusMap[1]}>Cancel order</Dropdown.Item>\n                          <Dropdown.Item eventKey=\"cancel\" disabled={o.orderState !== this.orderStatusMap[0]}>Cancel and refund order</Dropdown.Item>\n                        </DropdownButton>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </Table>\n            </>\n          ) : (\n            <Card.Text>\n              No orders found for <Badge bg=\"secondary\">{account}</Badge>. You can create an order using the \"New order\" panel, or switch to another account in Metamask.\n            </Card.Text>\n          )}\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n","import { connected, connectionStore } from '../../redux/connectionStore';\n\nimport Button from 'react-bootstrap/Button';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Form from 'react-bootstrap/Form';\nimport Modal from 'react-bootstrap/Modal';\nimport React from 'react';\nimport { networkNames } from '../../utils/networkMap';\n\ntype Props = {\n  show: boolean,\n  onHide: () => void,\n};\n\ntype State = {\n  networkId: string,\n  account: string | undefined\n};\n\nconst initialState: State = {\n  networkId: '0x5',\n  account: '0xAF3e8346F1B57B0915851dBA3a1CDE65CF8dF522'\n};\n\nexport default class PlainTextLoginModal extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = initialState;\n  }\n\n  connected = () => {\n    connectionStore.dispatch(connected({\n      networkId: this.state.networkId,\n      account: this.state.account\n    }));\n  };\n\n  render() {\n    const networkName = networkNames[connectionStore.getState().networkId];\n    const networkOptions = Object.keys(networkNames).map(networkId => (\n      <Dropdown.Item key={networkId} eventKey={networkId} active={this.state.networkId === networkId}>{networkNames[networkId]}</Dropdown.Item>\n    ));\n\n    return (\n      <Modal show={this.props.show} onHide={this.props.onHide}>\n        <Modal.Header closeButton>\n          <Modal.Title>Connect using plain-text</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>This is an alternate decentralized connection method, if you prefer to not use Metamask yet.</p>\n          <p>This will allow you to view orders, which are stored on the blockchain.</p>\n          <h6>Wallet address:</h6>\n          <Form.Control type=\"text\" placeholder=\"e.g.: '0xAF3e8346F1B57B0915851dBA3a1CDE65CF8dF522'\" defaultValue={this.state.account} onChange={e => this.setState({ account: e.target.value })} />\n          <h6>Network:</h6>\n          <DropdownButton title={networkNames[this.state.networkId]} onSelect={networkId => networkId && this.setState({ networkId })} variant=\"dark\">\n            {networkOptions}\n          </DropdownButton>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={this.props.onHide}>\n            Cancel\n          </Button>\n          <Button variant=\"primary\" onClick={this.connected}>\n            Connect\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n","import Card from 'react-bootstrap/Card';\nimport React from 'react';\n\ntype Props = {\n  className: string\n};\n\nconst WelcomeCard = (props: Props) => (\n  <Card className={props.className}>\n    <Card.Body>\n      <Card.Title>\n        Welcome to Flyweight.\n      </Card.Title>\n      <Card.Text>\n        To start viewing your orders, please connect to Ethereum using one of the methods in the top-right.\n      </Card.Text>\n      <Card.Text>\n        The metamask option is only used to read an ethereum address to start the app with. Because of this, users are also able to simply copy-paste in an ethereum address as plain-text.\n      </Card.Text>\n    </Card.Body>\n  </Card>\n);\n\nexport default WelcomeCard;\n","'use strict';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport { alertClear, alertStore } from './redux/alertStore';\nimport { connected, connectionStore, disconnected } from './redux/connectionStore';\n\nimport Banner from './components/Banner';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport FlyweightAlert from './components/FlyweightAlert';\nimport Header from './components/Header';\nimport NewOrderCard from './components/NewOrderCard';\nimport OrdersCard from './components/OrdersCard';\nimport PlainTextLoginModal from './components/PlainTextLoginModal';\nimport React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport WelcomeCard from './components/WelcomeCard';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { ethers } from 'ethers';\nimport { ordersStore } from './redux/ordersStore';\nimport { tryMetamaskOpAsync } from './utils/providerAdapter';\nimport watch from 'redux-watch';\n\ntype Props = {};\n\ntype State = {\n  metamaskEventsBound: boolean,\n  isMetamaskProviderDetected: boolean,\n  isConnected: boolean,\n  showManualLoginModal: boolean,\n};\n\nclass App extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      metamaskEventsBound: false,\n      isMetamaskProviderDetected: false,\n      isConnected: false,\n      showManualLoginModal: false,\n    };\n  }\n\n  async componentDidMount() {\n    this.subscribeConnected();\n    this.subscribeDisconnected();\n\n    const isMetamaskProviderDetected = !!await detectEthereumProvider();\n    this.setState({ isMetamaskProviderDetected });\n\n    if (isMetamaskProviderDetected) {\n      this.ensureMetamaskEventsBound((window as any).ethereum);\n    }\n  }\n\n  ensureMetamaskEventsBound = (metamaskApi: any) => {\n    if (this.state.metamaskEventsBound) {\n      return;\n    }\n\n    metamaskApi.on('accountsChanged', (accounts: Array<string>) => {\n      if (accounts.length) {\n        const networkId = connectionStore.getState().networkId;\n        const account = accounts[0];\n        connectionStore.dispatch(connected({ networkId, account }));\n      } else {\n        connectionStore.dispatch(disconnected());\n      }\n    });\n\n    metamaskApi.on('chainChanged', (networkId: string) => {\n      const account = connectionStore.getState().account;\n      connectionStore.dispatch(connected({ networkId, account }));\n    });\n\n    this.setState({ metamaskEventsBound: true });\n  };\n\n  toggleManualLoginModal = () => {\n    this.setState((prevState) => ({\n      showManualLoginModal: !prevState.showManualLoginModal,\n    }));\n  };\n\n  metamaskLogin = async () => {\n    const metamaskApi = (window as any).ethereum;\n    const networkId = await metamaskApi.request({ method: 'eth_chainId' });\n\n    const metamaskProvider = new ethers.providers.Web3Provider(metamaskApi);\n    let accounts: Array<string> | null = null;\n    const isRequestSuccess = await tryMetamaskOpAsync(async () => {\n      accounts = await metamaskProvider.send('eth_requestAccounts', []);\n    });\n\n    if (accounts && isRequestSuccess) {\n      const account = accounts[0];\n      connectionStore.dispatch(connected({ networkId, account }));\n      alertStore.dispatch(alertClear());\n    }\n  };\n\n  subscribeConnected = () => {\n    const w = watch(connectionStore.getState, 'account');\n    connectionStore.subscribe(w((newAccount, oldAccount) => {\n      if (oldAccount !== newAccount && newAccount) {\n        this.setState({\n          showManualLoginModal: false,\n          isConnected: true,\n        });\n      }\n    }));\n  };\n\n  subscribeDisconnected = () => {\n    const w = watch(connectionStore.getState, 'account');\n    connectionStore.subscribe(w((newAccount, oldAccount) => {\n      if (oldAccount !== newAccount && !newAccount) {\n        this.setState({ isConnected: false });\n      }\n    }));\n  };\n\n  render() {\n    const isConnectedToTestnet = !!(connectionStore.getState().account && connectionStore.getState().networkId !== '0x1');\n    return (\n      <>\n        <Banner show={isConnectedToTestnet} />\n        <Header isConnected={this.state.isConnected}\n          isMetamaskProviderDetected={this.state.isMetamaskProviderDetected}\n          toggleManualLoginModal={this.toggleManualLoginModal}\n          metamaskLogin={this.metamaskLogin}\n        />\n        <Container>\n          <Row>\n            <Col>\n              <FlyweightAlert />\n            </Col>\n          </Row>\n          <Row>\n            <Col xs={12} lg={8}>\n              {connectionStore.getState().account ? (\n                <OrdersCard className=\"mb-3 mb-lg-0\" />\n              ) : (\n                <WelcomeCard className=\"mb-3 mb-lg-0\" />\n              )}\n            </Col>\n            <Col xs={12} lg={4}>\n              <NewOrderCard isMetamaskProviderDetected={this.state.isMetamaskProviderDetected} />\n            </Col>\n          </Row>\n        </Container>\n        <PlainTextLoginModal show={this.state.showManualLoginModal} onHide={this.toggleManualLoginModal} />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import './index.css';\n\nimport App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport reportWebVitals from './reportWebVitals';\n\nconst rootEle = document.getElementById('root');\nif (rootEle) {\n  const root = ReactDOM.createRoot(rootEle);\n  root.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  );\n} else {\n  console.warn('To render this app, please add a html element with id \"root\"');\n}\n"],"sourceRoot":""}